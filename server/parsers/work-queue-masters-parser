#! /usr/bin/env perl

use 5.10.0;
use strict;
use Error qw(:try);
use Error::Simple;
use Getopt::Long qw(:config no_ignore_case);
use DateTime;
use JSON;

my $usage = "Work Queue Masters Record Type Log Parser Options:

Required:
    <log>	    Sets the path to the log file.
    <app>           Sets the name of the origin application/system of the log.

Example Usage:
    work-queue-masters-parser wqmaster.wqlog testapp

";

if(@ARGV != 2) {
    print(STDERR $usage);
    exit 1;
}
my ($log, $app) = @ARGV;

my %master;
#Master has the following attributes:
#address
#start
#end
#failures
#workers
#rules
#tasks
#files

my $first = 1;
my $workerid = 1;
my $fileid = 1;
my $envid = 1;
my $procid = 1;
my $currtask = 1;
my $currrule = 0;
my $makeflow = 0;
my $prevline = 0;

open(LOG, $log);
while(my $line = <LOG>) {
    #Work Queue Master Debug Output

    #wq: Master advertising as disc01.crc.nd.edu:9000
    if($line =~ m/wq: Master advertising as (?<master>[a-zA-Z0-9\-]+\.crc\.nd\.edu:\d+)/) {
        $master{address} = $+{master};
        $master{workers} = {};
        $master{rules} = {};
        $master{tasks} = {};
        $master{files} = {};
        $master{failures} = 0;
        next;
    }

    #wq: Task 1 state change: UNKNOWN (0) to WAITING (1)
    elsif($line =~ m/wq: Task (?<taskid>\d+) state change: UNKNOWN \(0\) to WAITING \(1\)/) {
        $tasks{$+{taskid}}{taskid} = int($+{taskid});
        $tasks{$+{taskid}}{master} = $master{address};
        $tasks{$+{taskid}}{files} = {};
        $tasks{$+{taskid}}{inputs} = {};
        $tasks{$+{taskid}}{outputs} = {};
        $tasks{$+{taskid}}{envVars} = {};
        $tasks{$+{taskid}}{process} = {};
        $tasks{$+{taskid}}{state} = 1;
        $tasks{$+{taskid}}{failures} = 0;
        $master{tasks}{$+{taskid}} = int($+{taskid});
        next;
    }

    #wq: d12chas326.crc.nd.edu (10.32.84.159:37966) running CCTools version 8.0.0 on Linux (operating system) with architecture x86_64 is ready
    elsif($line =~ m/wq: (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\) running/) {
        my $address = $+{waddr} . ":" . $+{wport};
        if(not exists $workers{$address}{workerid}) {
            $master{workers}{$workerid} = int($workerid);
            $workers{$address}{workerid} = int($workerid);
            $workerid++;
            $workers{$address}{address} = $address;
            $workers{$address}{master} = $master{address};
            $workers{$address}{rules} = {};
            $workers{$address}{tasks} = {};
            $workers{$address}{files} = {};
        }
        next;
    }

    #wq: tx to d8civy148.crc.nd.edu (10.32.80.45:56808): task 10
    elsif($line =~ m/wq: tx to (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\): task (?<taskid>\d+)/) {
        my $err = 0;
        my $address = $+{waddr} . ":" . $+{wport};

        if(not exists $workers{$address}{workerid}) {
            $master{workers}{$workerid} = int($workerid);
            $workers{$address}{workerid} = int($workerid);
            $workerid++;
            $workers{$address}{address} = $address;
            $workers{$address}{master} = $master{address};
            $workers{$address}{rules} = {};
            $workers{$address}{tasks} = {};
            $workers{$address}{files} = {};
        }
        $workers{$address}{tasks}{$+{taskid}} = int($+{taskid});

        my $wid = $workers{$address}{workerid};
        $tasks{$+{taskid}}{master} = $master{address};
        $tasks{$+{taskid}}{worker}{workerid} = int($wid);
        $tasks{$+{taskid}}{worker}{address} = $address;
        $currtask = $+{taskid};
        next;
    }

    #wq: tx to cclws08.cse.nd.edu (129.74.155.166:57768): category default
    elsif($line =~ m/wq: tx to (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\): category (?<category>[a-zA-Z0-9\-]+)/) {
        $tasks{$currtask}{category} = $+{category};
        next;
    }

    #wq: tx to cclws08.cse.nd.edu (129.74.155.166:57768): cores 1
    elsif($line =~ m/wq: tx to (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\): cores (?<cores>\d+)/) {
        $tasks{$currtask}{cores} = int($+{cores});
        next;
    }
    
    #wq: tx to cclws08.cse.nd.edu (129.74.155.166:57768): memory 412
    elsif($line =~ m/wq: tx to (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\): memory (?<memory>\d+)/) {
        $tasks{$currtask}{memory} = int($+{memory});
        next;   
    }

    #wq: tx to cclws08.cse.nd.edu (129.74.155.166:57768): disk 3347
    elsif($line =~ m/wq: tx to (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\): disk (?<disk>\d+)/) {
        $tasks{$currtask}{disk} = int($+{disk});
        next;   
    }

    #wq: tx to cclws08.cse.nd.edu (129.74.155.166:57768): gpus 0
    elsif($line =~ m/wq: tx to (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\): gpus (?<gpus>\d+)/) {
        $tasks{$currtask}{gpus} = int($+{gpus});
        next;   
    }

    #wq: tx to cclws08.cse.nd.edu (129.74.155.166:57768): infile file-0-e8cda3a52b8b08010832b5283fc747d6-in.dat in.dat 1
    elsif($line =~ m/wq: tx to (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\): infile file-\S+ (?<file>\S+) \d+/) {
        my $address = $+{waddr} . ":" . $+{wport};
        my $fid = -1;
        if(not exists $files{$+{file}}{fileid}) {
            $fid = $fileid;
            $files{$+{file}}{fileid} = int($fid);
            $files{$+{file}}{name} = $+{file};
            $files{$+{file}}{workers} = {};
            $files{$+{file}}{processes} = {};
            $files{$+{file}}{master} = $master{address};
            $files{$+{file}}{accesses} = 1;
            $files{$+{file}}{failures} = 0;
            $fileid++;
            $master{files}{$+{file}} = int($fid);
        }
        else {
            $files{$+{file}}{accesses}++;
            $fid = $files{$+{file}}{fileid}; 
        }
        my $wid = $workers{$address}{workerid};
        $files{$+{file}}{workers}{$wid} = int($wid);
        if(not exists $workers{$address}{files}{$+{file}}) {
            $workers{$address}{files}{$+{file}} = $fid;
        }
        $tasks{$currtask}{inputs}{$+{file}} = int($fid);
        if(not exists $files{$+{file}}{tasks}{$currtask}) {
            $files{$+{file}}{tasks}{$currtask} = int($currtask);
        }
        next;
    }

    #wq: tx to cclws08.cse.nd.edu (129.74.155.166:57768): outfile file-13-768751f261701ea3092d4f2ca0afe4d7-out.3.dat out.dat 0
    elsif($line =~ m/wq: tx to (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\): outfile file-\d+-\w+-(?<local>\S+) (?<remote>\S+) \d+/) {
        my $local = $+{file};
        my $remote = $+{remote};
        my $address = $+{waddr} . ":" . $+{wport};
        my $fid = -1;

        foreach my $fname (($+{local}, $+{remote})) {
            if(not exists $files{$fname}{fileid}) {
                $fid = $fileid;
                $files{$fname}{fileid} = int($fid);
                $files{$fname}{name} = $fname;
                $files{$fname}{accesses} = 1;
                $files{$fname}{processes} = {};
                $files{$fname}{master} = $master{address};
                $files{$fname}{failures} = 0;
                $fileid++;
                $master{files}{$fname} = int($fid);
            }
            else {
                $files{$fname}{accesses}++;
                $fid = $files{$fname}{fileid};
            }
            my $wid = $workers{$address}{workerid};
            $files{$fname}{workers}{$wid} = int($wid);
            if(not exists $workers{$address}{files}{$fname}) {
                $workers{$address}{files}{$fname} = int($fid);
            }
            $tasks{$currtask}{outputs}{$fname} = int($fid);
            if(not exists $files{$fname}{tasks}{$currtask}) {
                $files{$fname}{tasks}{$currtask} = $currtask;
            } 
        }
        next;
    }

    #wq: rx from cclvm06.virtual.crc.nd.edu (129.74.246.126:45930): missing file-298-f52f56dfdf65074d38f151ee4c184dad-out.50.dat 2
    elsif($line =~ m/wq: rx from (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\): missing file-/) {
        my $address = $+{waddr} . ":" . $+{wport};
        $workers{$address}{failures}++;
        $master{failures}++;
        next;
    }

    #wq: camd03.crc.nd.edu (10.32.77.84:38460) received 0.00 MB in 0.00s (3.35s MB/s) average 120.09s MB/s
    elsif($line =~ m/wq: (?<waddr>\S+) \([0-9\.]+:(?<wport>\d+)\) received \S+ MB in \S+ \(\S+ MB\/s\) average (?<bandwidth>\S+) MB\/s/) {
        my $address = $+{waddr} . ":" . $+{wport};
        $workers{$address}{bandwidth} = ($+{bandwidth} / 1.0);
        next;
    }

    #wq: Task 1 state change: WAITING (1) to RUNNING (2)
    elsif($line =~ m/wq: Task (?<taskid>\d+) state change: WAITING \(1\) to RUNNING \(2\)/) {
        $tasks{$+{taskid}}{state} = 2;
        next;
    }

    #wq: Task 1 state change: RUNNING (2) to WAITING_RETRIEVAL (3)
    elsif($line =~ m/wq: Task (?<taskid>\d+) state change: RUNNING \(2\) to WAITING_RETRIEVAL \(3\)/) {
        $tasks{$+{taskid}}{state} = 3;
        next;
    }

    #wq: Task 1 state change: WAITING_RETRIEVAL (3) to RETRIEVED (4)
    elsif($line =~ m/wq: Task (?<taskid>\d+) state change: WAITING_RETRIEVAL \(3\) to RETRIEVED \(4\)/) {
        $tasks{$+{taskid}}{state} = 4;
        next;
    }

    #wq: Task 1 state change: RETRIEVED (4) to DONE (5)
    elsif($line =~ m/wq: Task (?<taskid>\d+) state change: RETRIEVED \(4\) to DONE \(5\)/) {
        $tasks{$+{taskid}}{state} = 5;
        next;
    }


    #Makeflow Debug Output

    #makeflow: node 0 waiting -> running
    elsif($line =~ m/makeflow: node (?<ruleid>\d+) waiting -> running/) {
        $makeflow = 1;
        if(not exists $rules{$+{ruleid}}{ruleid}) {
            $rules{$+{ruleid}}{ruleid} = int($+{ruleid});
            $rules{$+{ruleid}}{master} = $master{address};
            $rules{$+{ruleid}}{workers} = {};
            $rules{$+{ruleid}}{tasks} = {};
            $rules{$+{ruleid}}{inputs} = {};
            $rules{$+{ruleid}}{outputs} = {};
            $rules{$+{ruleid}}{failures} = 0;
            $rules{$+{ruleid}}{retries} = 0;
        }
        $rules{$+{ruleid}}{state} = 2;
    }

    #batch: set option `task-id' to `1'
    elsif($line =~ m/batch: set option `task-id' to `(?<ruleid>\d+)'/) {
        if(not exists $rules{$+{ruleid}}{ruleid}) {
            $rules{$+{ruleid}}{ruleid} = int($+{ruleid});
            $rules{$+{ruleid}}{master} = $master{address};
            $rules{$+{ruleid}}{workers} = {};
            $rules{$+{ruleid}}{tasks} = {};
            $rules{$+{ruleid}}{inputs} = {};
            $rules{$+{ruleid}}{outputs} = {};
            $rules{$+{ruleid}}{failures} = 0;
            $rules{$+{ruleid}}{retries} = 0;
        }
        next;
    }
   
    #makeflow: node 0 running -> complete
    elsif($line =~ m/makeflow: node (?<ruleid>\d+) running -> complete/) {
        $rules{$+{ruleid}}{state} = 3;
        next;
    }

    #makeflow: node 0 running -> failed
    elsif($line =~ m/makeflow: node (?<ruleid>\d+) running -> failed/) {
        $rules{$+{ruleid}}{state} = 4;
        $rules{$+{ruleid}}{failures}++;
        $master{failures}++;
        next;
    }

    #makeflow: node 3 failed -> waiting
    elsif($line =~ m/makeflow: node (?<ruleid>\d+) failed -> waiting/) {
        $rules{$+{ruleid}}{retries}++;
        $rules{$+{ruleid}}{state} = 1;
        $tasks{$currtask}{rule}{ruleid} = int($+{ruleid}); 
        next;
    }

    #makeflow: Job 37 has returned.
    elsif($line =~ m/makeflow: Job (?<taskid>\d+) has returned/) {
        $currtask = $+{taskid};
        next;
    }

    #makeflow: File worker.35.debug created by rule 35.
    elsif($line =~ m/makeflow: File (?<file>\S+) created by rule (?<ruleid>\d+)/) {
        my $fid = -1;    
        if(not exists $files{$+{file}}{fileid}) {
            $fid = $fileid;
            $files{$+{file}}{fileid} = int($fid);
            $files{$+{file}}{name} = $+{file};
            $files{$+{file}}{accesses} = 1;
            $files{$+{file}}{processes} = {};
            $files{$+{file}}{workers} = {};
            $files{$+{file}}{master} = $master{address};
            $fileid++;
            $master{files}{$+{file}} = int($fid);
        }
        else {
            $fid = $files{$+{file}}{fileid};
        }
        if(not exists $files{$+{file}}{rules}{$+{ruleid}}) {
            $files{$+{file}}{rules}{$+{ruleid}} = int($+{ruleid});
        }
        $rules{$+{ruleid}}{outputs}{$+{file}} = int($fid);
        $tasks{$currtask}{rule}{ruleid} = int($+{ruleid});
        next;
    }
}
close(LOG);

sub print_help {
    print $usage;
    exit(1);
}
# vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab shiftround autoindent
