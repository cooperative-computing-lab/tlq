#! /usr/bin/env perl

use strict;
use DateTime;
use Digest::MD5 qw(md5_hex);
use List::MoreUtils qw(uniq);
my $usage = "Files Record Type Log Parser Options:

Required:
    <log>	    Sets the path to the log file.
    <app>           Sets the name of the origin application/system of the log.

Example Usage:
    components-parser ltrace.log testapp

";

if(@ARGV != 2) {
    print(STDERR $usage);
    exit 1;
}
my ($log, $app) = @ARGV;
my %components = ();
my %procs = ();
my ($cmd, $host, $cmdpid, $cmdppid, $cmdresult);
open(LOG, $log) or die "Could not open specified log file.\n";
while(my $line = <LOG>) {
    #30338   0.000000 
    if($line =~ m/^(?<pid>\d+)\s+\d+/) {
        $procs{$+{pid}} = 1;
    }
    #Wrote an ltrace for command: "dd if=in.dat of=out.dat bs=4096 count=2500" with PID 12539 from PPID 12538
    if($line =~ m/Wrote an ltrace for command: \"(?<cmd>.*)\" with PID (?<pid>\d+) from PPID (?<ppid>\d+) on (?<host>\S+)$/) {
        $cmd = $+{cmd};
        $cmdpid = $+{pid};
        $cmdppid = $+{ppid};
        $host = $+{host};
        make_record($cmd);
    }
    #Got result: 0
    elsif($line =~ m/Got result: (?<result>\d+)/) {
        $cmdresult = $+{result};
    }
}

foreach my $component (keys(%components)) {
    $components{$component}{hash} = md5_hex($host, $log, $component);
    my %r = %{$components{$component}};
    if(!$cmdresult and $cmdresult != 0) { $cmdresult = "NULL"; }
    print(STDOUT "INSERT OR REPLACE INTO component (hash, command, exitStatus, host, log, system) VALUES ('$r{hash}', '$cmd', '$cmdresult', '$host', '$log', '$app');\n");
}

my @linktypes = ("process");
foreach my $linktype (@linktypes) {
    my @tabname = ("component", $linktype);
    @tabname = sort({ $a cmp $b } @tabname);
    my $table = "$tabname[0]_$tabname[1]";
    foreach my $component (keys(%components)) {
        my $t1 = "component";
        my $hash = $components{$component}{hash};
        my $t2 = "$linktype";
        my $insert;
        if($linktype eq "process") {
            #my @pids = uniq(split(',', $components{$component}{pids}));
            my @pids = keys(%procs);
            foreach my $pid (@pids) {
                print(STDOUT "INSERT OR REPLACE INTO $table (component_hash, $linktype\_hash, host) SELECT $t1.hash AS component_hash, $t2.hash AS $linktype\_hash, $t1.host FROM $t1 JOIN $t2 ON $t1.log = $t2.log WHERE $t1.hash = '$hash' AND $t2.pid = $pid AND $t2.system = '$app';\n");
            }
        }
    }
}

sub make_record {
    my ($component) = @_;
    $components{$component}{pids} = $cmdpid;
    $components{$component}{command} = $cmd;
    $components{$component}{host} = $host;
    $components{$component}{system} = $app;
    return 0;
}

sub print_help {
    print $usage;
    exit(1);
}
# vim: tabstop=8 shiftwidth=4 softtabstop=4 expandtab shiftround autoindent
